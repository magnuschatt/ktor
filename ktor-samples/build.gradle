def host;

def hostServerProp = project.hasProperty('hostServer') ? project.hostServer : 'netty'
def enableAlpnProp = project.hasProperty('enableAlpn')

switch (hostServerProp) {
    case 'jetty': host = 'jetty'; break
    case 'netty': host = 'netty'; break
    case 'tomcat': host = 'tomcat'; break
    default: throw new InvalidUserDataException("Invalid host ${project.hostServer}")
}


subprojects {
    apply plugin: 'application'
    configurations {
        boot
    }

    dependencies {
        compile project(":ktor-server:ktor-server-core")
        compile "org.slf4j:jul-to-slf4j:1.7.12"

        compile project(":ktor-server:ktor-server-$host")

        if (enableAlpnProp) {
            if (hostServerProp == 'netty') {
                compile group: 'io.netty', name: 'netty-tcnative', version: '2.0.5.Final'
                compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: '2.0.5.Final'
                compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: '2.0.5.Final', classifier: 'linux-x86_64'
            } else if (hostServerProp == 'jetty') {
                boot group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: '8.1.11.v20170118'
            }
        }
    }

    mainClassName = "io.ktor.${host}.DevelopmentHost"

    afterEvaluate {
        def bootClasspath = configurations.boot.files
        def runTask = getTasksByName("run", false).first() as JavaExec

        runTask.jvmArgs(bootClasspath.collect { "-Xbootclasspath/p:${it.absolutePath}" })
    }
}
